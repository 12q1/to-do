{"version":3,"sources":["components/Layout.js","components/AddTodo.js","components/TodoListItem.js","components/TodoList.js","index.js","custom-hooks.js"],"names":["Layout","memo","props","Paper","elevation","style","padding","margin","backgroundColor","AppBar","color","position","height","Toolbar","Typography","children","AddTodo","Grid","container","xs","md","item","paddingRight","TextField","placeholder","value","inputValue","onChange","onInputChange","onKeyPress","onInputKeyPress","fullWidth","Button","variant","onClick","onButtonClick","TodoListItem","ListItem","divider","Checkbox","onCheckBoxToggle","checked","disableRipple","ListItemText","primary","text","ListItemSecondaryAction","IconButton","aria-label","TodoList","items","length","List","overflow","map","todo","idx","key","onItemRemove","onItemCheck","TodoApp","initialValue","useState","setInputValue","changeInput","event","target","clearInput","keyInput","callback","which","keyCode","useInputValue","todos","setTodos","addTodo","concat","checkTodo","index","removeTodo","filter","useTodos","clearInputAndAddTodo","_","rootElement","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.9bcf2b90.chunk.js","sourcesContent":["import React, { memo } from \"react\";\nimport { AppBar, Toolbar, Typography, Paper } from \"@material-ui/core\";\n\nconst Layout = memo(props => (\n  <Paper\n    elevation={0}\n    style={{ padding: 0, margin: 0, backgroundColor: \"#fafafa\" }}\n  >\n    <AppBar color=\"primary\" position=\"static\" style={{ height: 64 }}>\n      <Toolbar style={{ height: 64 }}>\n        <Typography color=\"inherit\">TODO APP</Typography>\n      </Toolbar>\n    </AppBar>\n    {props.children}\n  </Paper>\n));\n\nexport default Layout;\n","import React, { memo } from \"react\";\nimport { TextField, Paper, Button, Grid } from \"@material-ui/core\";\n\nconst AddTodo = memo(props => (\n  <Paper style={{ margin: 16, padding: 16 }}>\n    <Grid container>\n      <Grid xs={10} md={11} item style={{ paddingRight: 16 }}>\n        <TextField\n          placeholder=\"Add Todo here\"\n          value={props.inputValue}\n          onChange={props.onInputChange}\n          onKeyPress={props.onInputKeyPress}\n          fullWidth\n        />\n      </Grid>\n      <Grid xs={2} md={1} item>\n        <Button\n          fullWidth\n          color=\"secondary\"\n          variant=\"outlined\"\n          onClick={props.onButtonClick}\n        >\n          Add\n        </Button>\n      </Grid>\n    </Grid>\n  </Paper>\n));\n\nexport default AddTodo;\n","import React, { memo } from \"react\";\nimport {\n  ListItem,\n  Checkbox,\n  IconButton,\n  ListItemText,\n  ListItemSecondaryAction\n} from \"@material-ui/core\";\nimport DeleteOutlined from \"@material-ui/icons/DeleteOutlined\";\n\nconst TodoListItem = memo(props => (\n  <ListItem divider={props.divider}>\n    <Checkbox\n      onClick={props.onCheckBoxToggle}\n      checked={props.checked}\n      disableRipple\n    />\n    <ListItemText primary={props.text} />\n    <ListItemSecondaryAction>\n      <IconButton aria-label=\"Delete Todo\" onClick={props.onButtonClick}>\n        <DeleteOutlined />\n      </IconButton>\n    </ListItemSecondaryAction>\n  </ListItem>\n));\n\nexport default TodoListItem;\n","import React, { memo } from \"react\";\nimport { List, Paper } from \"@material-ui/core\";\nimport TodoListItem from \"./TodoListItem\";\n\nconst TodoList = memo(props => (\n  <>\n    {props.items.length > 0 && (\n      <Paper style={{ margin: 16 }}>\n        <List style={{ overflow: \"scroll\" }}>\n          {props.items.map((todo, idx) => (\n            <TodoListItem\n              {...todo}\n              key={`TodoItem.${idx}`}\n              divider={idx !== props.items.length - 1}\n              onButtonClick={() => props.onItemRemove(idx)}\n              onCheckBoxToggle={() => props.onItemCheck(idx)}\n            />\n          ))}\n        </List>\n      </Paper>\n    )}\n  </>\n));\n\nexport default TodoList;\n","import \"./styles.css\";\nimport React, { memo } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { useInputValue, useTodos } from \"./custom-hooks\";\nimport Layout from \"./components/Layout\";\nimport AddTodo from \"./components/AddTodo\";\nimport TodoList from \"./components/TodoList\";\n\nconst TodoApp = memo(props => {\n  const { inputValue, changeInput, clearInput, keyInput } = useInputValue();\n  const { todos, addTodo, checkTodo, removeTodo } = useTodos();\n\n  const clearInputAndAddTodo = _ => {\n    clearInput();\n    addTodo(inputValue);\n  };\n\n  return (\n    <Layout>\n      <AddTodo\n        inputValue={inputValue}\n        onInputChange={changeInput}\n        onButtonClick={clearInputAndAddTodo}\n        onInputKeyPress={event => keyInput(event, clearInputAndAddTodo)}\n      />\n      <TodoList\n        items={todos}\n        onItemCheck={idx => checkTodo(idx)}\n        onItemRemove={idx => removeTodo(idx)}\n      />\n    </Layout>\n  );\n});\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<TodoApp />, rootElement);\n","import { useState } from \"react\";\n\nexport const useInputValue = (initialValue = \"\") => {\n  const [inputValue, setInputValue] = useState(initialValue);\n\n  return {\n    inputValue,\n    changeInput: event => setInputValue(event.target.value),\n    clearInput: () => setInputValue(\"\"),\n    keyInput: (event, callback) => {\n      if (event.which === 13 || event.keyCode === 13) {\n        callback(inputValue);\n        return true;\n      }\n\n      return false;\n    }\n  };\n};\n\nexport const useTodos = (initialValue = []) => {\n  const [todos, setTodos] = useState(initialValue);\n\n  return {\n    todos,\n    addTodo: text => {\n      if (text !== \"\") {\n        setTodos(\n          todos.concat({\n            text,\n            checked: false\n          })\n        );\n      }\n    },\n    checkTodo: idx => {\n      setTodos(\n        todos.map((todo, index) => {\n          if (idx === index) {\n            todo.checked = !todo.checked;\n          }\n\n          return todo;\n        })\n      );\n    },\n    removeTodo: idx => {\n      setTodos(todos.filter((todo, index) => idx !== index));\n    }\n  };\n};\n"],"sourceRoot":""}